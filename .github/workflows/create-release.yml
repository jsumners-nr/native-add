name: Create Release
on:
  workflow_dispatch:
    inputs:
      changelog_file:
        description: Name of changelog file.
        type: string
        required: false
        default: CHANGELOG.md

permissions:
  contents: read

jobs:
  build_x86_64:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        node: [16, 18, 20]
        arch: [ x86, x64 ]
        exclude:
          # Ubuntu does not ship x86 builds.
          - { os: ubuntu-latest, arch: x86 }
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / Node ${{ matrix.node }} ${{ matrix.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.arch }}
      - name: Install
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.node }}
          path: prebuilds

  build_macos_arm:
    strategy:
      matrix:
        os: [macos-14]
        node: [16, 18, 20]
        arch: [arm64]
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / Node ${{ matrix.node }} ${{ matrix.arch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.arch }}
      - name: Install
        run: npm install
      - name: Build
        run: npm run build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.node }}
          path: prebuilds

  build_linux_arm:
    strategy:
      matrix:
        node: [16, 18, 20]
    runs-on: ubuntu-latest
    name: Linux / Node ${{ matrix.node }} arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            NODE_VERSION=${{ matrix.node }}
          file: linux_arm.dockerfile
          tags: linux_arm:latest
          load: true
          push: false
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run build
        uses: addnab/docker-run-action@v3
        with:
          image: linux_arm:latest
          options: --platform linux/arm64 -v ${{ github.workspace }}:/host
          run: |
            npm install
            npm run build
            cp -R prebuilds /host/
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-${{ matrix.node }}
          path: prebuilds

  package:
    needs: [build_x86_64, build_macos_arm, build_linux_arm]
    runs-on: ubuntu-latest
    name: Create package
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: |
          mkdir prebuilds
          rm -f .gitignore
      - uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/prebuilds
          merge-multiple: true
      - run: echo -e "PKG_VERSION=$(jq -r .version < package.json)" >> "$GITHUB_ENV"
      - run: npm pack
      - uses: actions/upload-artifact@v4
        with:
          name: npm-module
          path: jsumners-nr-native-add-${{ env.PKG_VERSION }}.tgz

  # Our typical flow looks like:
  # 1. prepare-release workflow
  # 2. create-release workflow
  #
  # We can't do that (easily) because access to artifacts from other workflows
  # are difficult to access (requires a personal access token). See
  # https://github.com/actions/download-artifact#download-artifacts-from-other-workflow-runs-or-repositories
  #
  # Given that, we need to replicate all of our create-release steps inline
  # here.
  tag_release:
    needs: [package]
    runs-on: ubuntu-latest
    name: Tag Release
    steps:
      - uses: actions/checkout@v4
      # We need access to the prep scripts in the node-newrelic repo.
      - uses: actions/checkout@v4
        with:
          repository: newrelic/node-newrelic
          path: agent-repo
      - uses: actions/setup-node@v4
      - run: |
          # Install agent-repo dependencies.
          npm ci --prefix agent-repo
      - name: Configure GitHub Credentials
        run: |
          git config user.name ${GITHUB_ACTOR}
          git config user.email gh-actions-${GITHUB_ACTOR}@github.com
      - name: Create Release Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node ./agent-repo/bin/create-release-tag.js --branch ${{ github.ref }} --repo ${{ github.repository }} --workflows test.yml,prepare-release.yml
      - name: Get Created Tag
        id: get_tag
        run: echo "latest_tag=$(git describe --tags --abbrev=0)" >> ${GITHUB_OUTPUT}
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node ./agent-repo/bin/create-github-release.js --tag ${{ steps.get_tag.outputs.latest_tag }} --repo ${{ github.repository }} --changelog ${{ inputs.changelog_file }}

  publish:
    needs: [tag_release]
    runs-on: ubuntu-latest
    name: Publish Package
    steps:
      - uses: actions/setup-node@v4
        with:
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/download-artifact@v4
        with:
          name: npm-module
      - run: echo -e "PKG_NAME=$(ls -1A *.tgz | head -n 1)" >> "$GITHUB_ENV"
      - run: npm publish --access=public ${PKG_NAME}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
